name: Build/release

on:
  pull_request:
    branches: ["main"]
  push:
    tags: [v*]
    branches: ["main"]

permissions:
  contents: write # Required for creating releases

jobs:
  build-and-release:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os:
          - macos-latest
          - macos-15-intel # x86 (Intel) macOS
          - ubuntu-latest
          - ubuntu-24.04-arm
          - windows-latest # (don't release, just build artifacts)

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v1

      - name: Determine if releasing
        id: release
        shell: bash
        run: |
          if [[ "${GITHUB_REF}" =~ ^refs/tags/v ]]; then
            echo "RELEASE=true" >> $GITHUB_OUTPUT
          else
            echo "RELEASE=false" >> $GITHUB_OUTPUT
          fi

      - name: Debug release output
        run: |
          echo "GITHUB_REF=${GITHUB_REF}"
          echo "RELEASE=${{ steps.release.outputs.RELEASE }}"

      - name: Install Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 22

      - name: Setup pnpm
        uses: pnpm/action-setup@v4.1.0

      ############ LINUX ############
      - name: Install Snapcraft (Ubuntu)
        if: startsWith(matrix.os, 'ubuntu')
        run: sudo snap install snapcraft --classic

      - name: Validate Snapcraft credentials on Linux release
        if: startsWith(matrix.os, 'ubuntu') && steps.release.outputs.RELEASE == 'true'
        run: snapcraft whoami -q
        env:
          SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAPCRAFT_STORE_CREDENTIALS }}

      ############ MACOS ############
      - name: Prepare for app notarization
        if: ${{ startsWith(matrix.os, 'macos') && steps.release.outputs.RELEASE == 'true' }}
        run: |
          mkdir -p ~/private_keys/
          echo '${{ secrets.apple_api_key }}' > ~/private_keys/apple_api_key.p8

      - name: Create Sentry env file
        working-directory: apps/desktop
        shell: bash
        run: echo "SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}" > .env.sentry-build-plugin

      - name: Install pnpm dependencies
        run: pnpm install
        env:
          CI: true
          ADBLOCK: true

      - name: Build for production
        run: pnpm run build

      - name: Replace package name in package.json - ubuntu
        working-directory: apps/desktop
        if: startsWith(matrix.os, 'ubuntu')
        # needed to prevent "тип expected argument for flag '--executable' " error on linux
        run: |
          sed -i 's/"name": "@openmarch\/desktop"/"name": "OpenMarch"/g' package.json

      - name: Build/release Electron app (except windows)
        uses: ./actions/desktop-deploy
        if: ${{ !startsWith(matrix.os, 'windows') }}
        with:
          # GitHub token, automatically provided to the action
          # (No need to define this secret in the repo settings)
          github_token: ${{ secrets.github_token }}
          # If the commit is tagged with a version (e.g. "v1.0.0"), release the app after building
          release: ${{ steps.release.outputs.RELEASE }}
          mac_certs: ${{ secrets.mac_certs }}
          mac_certs_password: ${{ secrets.mac_certs_password }}
          max_attempts: 5
        env:
          # Not needed since not building on windows
          # PKG_CONFIG_PATH: "C:\\msys64\\mingw64\\lib\\pkgconfig"
          APPLE_API_KEY: "~/private_keys/apple_api_key.p8"
          APPLE_API_KEY_ID: ${{ secrets.apple_api_key_id }}
          APPLE_API_ISSUER: ${{ secrets.apple_api_key_issuer }}
          # also put in camelCase for electron/notarize
          appleApiKey: "~/private_keys/apple_api_key.p8"
          appleApiKeyId: ${{ secrets.apple_api_key_id }}
          appleApiIssuer: ${{ secrets.apple_api_key_issuer }}
          CSC_IDENTITY_AUTO_DISCOVERY: "${{ steps.release.outputs.RELEASE == 'true' }}"
          # For releasing
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAPCRAFT_STORE_CREDENTIALS }}
          SNAPCRAFT_BUILD_ENVIRONMENT: lxd
